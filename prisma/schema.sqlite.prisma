generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db" // Or ":memory:" for in-memory
}

model User {
  id         String        @id
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt
  sessions   ChatSession[]
}

model ChatSession {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  userId   String
  user     User          @relation(fields: [userId], references: [id])
  messages ChatMessage[]
}

model ChatMessage {
  id String @id @default(uuid())

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  content   Json
  sender    String
  sessionId String
  session   ChatSession @relation(fields: [sessionId], references: [id])
}

model LLMModel {
  id          String  @id @default(uuid())
  name        String  @unique
  modelName   String  @unique
  version     String?
  description String

  temperatureMin     Float? @default(0.0)
  temperatureMax     Float? @default(1.0)
  temperatureDefault Float? @default(0.7)

  top_pMin     Float? @default(0.0)
  top_pMax     Float? @default(1.0)
  top_pDefault Float? @default(0.9)

  top_kMin     Int? @default(0)
  top_kMax     Int? @default(100)
  top_kDefault Int? @default(0)

  max_tokensMin     Int? @default(1)
  max_tokensMax     Int? @default(4096)
  max_tokensDefault Int? @default(256)

  presence_penaltyMin     Float? @default(-2.0)
  presence_penaltyMax     Float? @default(2.0)
  presence_penaltyDefault Float? @default(0.0)

  frequency_penaltyMin     Float? @default(-2.0)
  frequency_penaltyMax     Float? @default(2.0)
  frequency_penaltyDefault Float? @default(0.0)

  repeat_penaltyMin     Float? @default(1.0)
  repeat_penaltyMax     Float? @default(2.0)
  repeat_penaltyDefault Float? @default(1.0)

  stop_sequences Json? // Store as a JSON array of strings

  usageCount Int      @default(0)
  agents     Agent[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Agent {
  id   String @id @default(uuid())
  name String

  llmModelId String
  llmModel   LLMModel @relation(fields: [llmModelId], references: [id])

  temperature       Float?
  top_p             Float?
  top_k             Int?
  max_tokens        Int?
  presence_penalty  Float?
  frequency_penalty Float?
  repeat_penalty    Float?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}